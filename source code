using System;
using System.Linq;
using System.IO;
using MC_SMP_16_18;
using NotVisualBasic.FileIO;
using System.Text.RegularExpressions;
using System.Diagnostics;
using System.Text;
using System.Collections.Generic;

namespace FlightPlanProcessor
{ 
    public class FlightPlanManager
    {
        private Dictionary<Flight_plan_kind, FlightPlanContext> _flightPlans = new Dictionary<Flight_plan_kind, FlightPlanContext>();

        private List<Flightplan_data_type> _rawFlightPlanDataItems = new List<Flightplan_data_type>();

        //private List<MC_common.MC_waypoint_type> _commonFlightPlan = new List<MC_common.MC_waypoint_type>();

        private ushort _lastContentId = 0;

        private Content_type _currentContent = null;

        /// <summary>
        /// 1553 message data
        /// </summary>
        private class Message1553
        {
            public ushort Command;
            public ushort[] Data = new ushort[32];
            public ushort year;
            public ushort day;
            public ulong timestamp;
        }

        /// <summary>
        /// Constructor
        /// </summary>
        public FlightPlanManager()
        {
            _flightPlans.Add(Flight_plan_kind.Active, new FlightPlanContext(Flight_plan_kind.Active));
            _flightPlans.Add(Flight_plan_kind.Inactive, new FlightPlanContext(Flight_plan_kind.Inactive));
            _flightPlans.Add(Flight_plan_kind.Modified, new FlightPlanContext(Flight_plan_kind.Modified));
        }

        /// <summary>
        /// Resets the processor to default values
        /// </summary>
        private void Reset()
        {

            foreach(var kvp in _flightPlans)
            {
                kvp.Value.Reset();
            }

            _currentContent = null;

            _rawFlightPlanDataItems.Clear();
        }

        /// <summary>
        /// Processes a flight plan.
        /// </summary>
        /// <param name="aFile">The 1553 data capture file to process</param>
        /// <returns>false on error, true otherwise</returns>
        public bool Process(string aFile)
        {
            Reset();

            if (aFile == null)
            {
                Console.WriteLine("File name required\n");
                return false;
            }

            if (!File.Exists(aFile))
            {
                Console.WriteLine("File not found\n");

                return false;
            }

            CsvTextFieldParser p = new CsvTextFieldParser(aFile);

            p.Delimiters = new string[] { "," };

            p.TrimWhiteSpace = true;

            while (!p.EndOfData)
            {
                string[] fields = p.ReadFields();

                if (fields[0] == "TimeStamp")
                {
                    //Jump past the header
                    continue;
                }

                Message1553 msg = ParseMessage(fields);

                byte[] raw = new byte[64];

                GetBytes(raw, msg.Data);

                byte rt = (byte)(msg.Command >> 11);
                byte sa = (byte)((msg.Command >> 5) & 0x1F);

                bool end_of_xmit_found = false;

                if ((rt == 16) || (rt == 18))
                {
                    switch (sa)
                    {
                        case 1:
                            {
                                MC_SMP_SA_01 m = new MC_SMP_SA_01();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_1);

                                break;
                            }
                        case 2:
                            {
                                MC_SMP_SA_02 m = new MC_SMP_SA_02();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_2);
                                break;
                            }
                        case 3:
                            {
                                MC_SMP_SA_03 m = new MC_SMP_SA_03();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_3);
                                break;
                            }
                        case 6:
                            {
                                MC_SMP_SA_06 m = new MC_SMP_SA_06();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_4);
                                break;
                            }
                        case 7:
                            {
                                MC_SMP_SA_07 m = new MC_SMP_SA_07();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_5);
                                break;
                            }
                        case 25:
                            {
                                MC_SMP_SA_25 m = new MC_SMP_SA_25();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_6);
                                break;
                            }
                        case 26:
                            {
                                MC_SMP_SA_26 m = new MC_SMP_SA_26();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_7);
                                break;
                            }
                        case 27:
                            {
                                MC_SMP_SA_27 m = new MC_SMP_SA_27();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_8);
                                break;
                            }
                        case 28:
                            {
                                MC_SMP_SA_28 m = new MC_SMP_SA_28();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");
                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_9);
                                break;
                            }
                        case 29:
                            {
                                MC_SMP_SA_29 m = new MC_SMP_SA_29();

                                if (!m.Read(raw))
                                {
                                    Debug.Fail("Could not parse 1553 data.");

                                    Console.WriteLine("Could not process data line{0}: {1}:{2}", p.LineNumber, rt, sa);
                                    return false;
                                }

                                end_of_xmit_found = ProcessData(m.data_10);
                                break;
                            }
                    }
                }

                if (end_of_xmit_found)
                {
                    if (_currentContent != null)
                    {
                        //received whole flight plan
                        end_of_xmit_found = false;

                        if (FlightPlanContentChanged())
                        {
                            foreach (Flightplan_data_type fpData in _rawFlightPlanDataItems)
                            {
                                DisplayData(fpData);
                            }

                            Console.Write("FLIGHT PLAN CHANGED\n\n");

                            FinalLegProcessing();

                            DisplayCombinedFlightPlan();
                        }
                    }
                    else
                    {
                        Console.Write("****PARTIAL FLIGHT PLAN RECEIVED\n\n");
                    }

                    //reset information
                    Reset();
                }
            }

            return true;
        }

        private void FinalLegProcessing()
        {
            const uint MAX_SEQ_NUM = 2000; //LGT made it up

            foreach (var kvp in _flightPlans)
            {
                FlightPlanContext fp = kvp.Value;

                double current_lat = 0.0;
                double current_lon = 0.0;
                int str_leg_index = 0;
                int crv_leg_index = 0;

                //_commbinedLeg
                fp.CombinedLegs.Clear();

                for (ushort sequenceNumber = 1;
                      (sequenceNumber < MAX_SEQ_NUM) &&
                      ((str_leg_index < fp.StraightLegs.Count) ||
                        (crv_leg_index < fp.CurvedLegs.Count));
                      sequenceNumber++)
                {
                    if ((str_leg_index < fp.StraightLegs.Count) &&
                         (fp.StraightLegs[str_leg_index].sequence_number.value == sequenceNumber))
                    {
                        Straight_leg_type str_leg = fp.StraightLegs[str_leg_index];

                        if (str_leg.leg_type == Straight_leg_kind.start)
                        {
                            current_lat = str_leg.latitude.value;
                            current_lon = str_leg.longitude;
                        }
                        else
                        {

                            Waypoint_DB_Record rec = new Waypoint_DB_Record();

                            rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_UNKNOWN;

                            if (fp.Kind == Flight_plan_kind.Active)
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_PRIMARY_LEG;

                            }
                            else if (fp.Kind == Flight_plan_kind.Modified)
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_PROVISIONAL_LEG;
                            }
                            else
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_INACTIVE_LEG;
                            }

                            rec.waypoint_Id = 0;
                            rec.valid_point = true;
                            rec.straight_leg.lat_lon_only = true;
                            rec.straight_leg.latitude_point1 = current_lat;
                            rec.straight_leg.longitude_point1 = current_lon;
                            rec.straight_leg.latitude_point2 = str_leg.latitude.value;
                            rec.straight_leg.longitude_point2 = str_leg.longitude;
                            rec.straight_leg.wp_Id1 = 0;
                            rec.straight_leg.wp_Id2 = 0;
                            rec.straight_leg.str_leg_category = (FMS_LEG_CAT_TYPE)str_leg.added_info;
                            rec.straight_leg.str_leg_assoc_waypt = str_leg.waypoint_index.value;

                            fp.CombinedLegs.Add(rec);

                            current_lat = str_leg.latitude.value;
                            current_lon = str_leg.longitude;

                        }

                        str_leg_index++;
                    }
                    else if ((crv_leg_index < fp.CurvedLegs.Count) &&
                              (fp.CurvedLegs[crv_leg_index].sequence_number.value == sequenceNumber))
                    {
                        Curved_leg_type crv_leg = fp.CurvedLegs[crv_leg_index];

                        if (crv_leg.leg_type == Curved_leg_kind.Start)
                        {
                            current_lat = crv_leg.latitude_end.value;
                            current_lon = crv_leg.longitude_end;
                        }
                        else
                        {

                            Waypoint_DB_Record rec = new Waypoint_DB_Record();

                            rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_UNKNOWN;

                            if (fp.Kind == Flight_plan_kind.Active)
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_PRIMARY_CURVED_LEG;

                            }
                            else if (fp.Kind == Flight_plan_kind.Modified)
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_PROV_CURVED_LEG;
                            }
                            else
                            {
                                rec.wp_type = FLIGHT_PLAN.FLIGHT_PLAN_INACTIVE_CURVED_LEG;
                            }

                            rec.waypoint_Id = 0;
                            rec.valid_point = true;
                            rec.curved_leg.latitude_point1 = current_lat;
                            rec.curved_leg.longitude_point1 = current_lon;
                            rec.curved_leg.latitude_point2 = crv_leg.latitude_ctr.value;
                            rec.curved_leg.longitude_point2 = crv_leg.longitude_ctr;
                            rec.curved_leg.latitude_point3 = crv_leg.latitude_end.value;
                            rec.curved_leg.longitude_point3 = crv_leg.longitude_end;
                            rec.curved_leg.turn_right = crv_leg.turn_right == 1;
                            rec.curved_leg.crv_leg_category = (FMS_LEG_CAT_TYPE)crv_leg.added_info;
                            rec.curved_leg.crv_leg_assoc_waypt = crv_leg.waypoint_index.value;

                            fp.CombinedLegs.Add(rec);

                            current_lat = crv_leg.latitude_end.value;
                            current_lon = crv_leg.longitude_end;

                        }

                        crv_leg_index++;
                    }
                }

            }
        }

        private void DisplayCombinedFlightPlan()
        {
            foreach (var kvp in _flightPlans)
            {
                FlightPlanContext fp = kvp.Value;

                if (fp.Kind == Flight_plan_kind.Active)
                {
                    Console.Write("FLIGHT PLAN: {0}\n---------------\n\n", "ACTIVE");
                }
                else if (fp.Kind == Flight_plan_kind.Modified)
                {
                    Console.Write("FLIGHT PLAN: {0}\n---------------\n\n", "MODIFIED");
                }
                else
                {
                    Console.Write("FLIGHT PLAN: {0}\n---------------\n\n", "INACTIVE");
                }


               fp.CombinedLegs.ForEach(x =>
               {
                   DisplayWaypointDBRecord(x, fp.Kind);

                   Console.Write("\n\n");
               });
            }

        }

        private void DisplayData(Flightplan_data_type aFlightPlan)
        {
            switch (aFlightPlan.kind)
            {
                case Flightplan_data_kind.airport:
                    DisplayAirports(aFlightPlan.airport);
                    break;

                case Flightplan_data_kind.carp_drive:
                    DisplayCarp(aFlightPlan.carp);
                    break;

                case Flightplan_data_kind.content:
                    DisplayContent(aFlightPlan.content);
                    break;

                case Flightplan_data_kind.crv_leg:
                    DisplayCurveLegs(aFlightPlan.crv);
                    break;

                case Flightplan_data_kind.end_of_xmit:
                    Console.Write("End of transmit\n");
                    break;

                case Flightplan_data_kind.navaid:
                    DisplayNavaids(aFlightPlan.nav);
                    break;

                case Flightplan_data_kind.none:
                    Console.Write("None\n");
                    break;

                case Flightplan_data_kind.ref_:
                    DisplayRefPoints(aFlightPlan.ref_);
                    break;

                case Flightplan_data_kind.runway:
                    DisplayRunways(aFlightPlan.runway);
                    break;

                case Flightplan_data_kind.str_leg:
                    DisplayStraightLegs(aFlightPlan.str);
                    break;

                case Flightplan_data_kind.vpt:
                    DisplayVerticalPoints(aFlightPlan.vert1, aFlightPlan.vert2);
                    break;

                case Flightplan_data_kind.waypoint:
                    DisplayWaypoints(aFlightPlan.wpt);
                    break;

                default:
                    Console.Write("Unknown flight plan data type {0}\n", (int)aFlightPlan.kind);
                    break;
            }
        }

        private bool FlightPlanContentChanged()
        {
            bool changed = false;

            if (_lastContentId == 0)
            {
                changed = true;
            }
            else
            {
                if (_currentContent.act_fp_id != _lastContentId)
                {
                    Console.Write("act_fp_id changed {0} : {1}\n", _lastContentId, _currentContent.act_fp_id);

                    changed = true;
                }
            }

            if (changed)
            {
                _lastContentId = _currentContent.act_fp_id;
            }

            return changed;
        }

        private bool ProcessData(Flightplan_data_type aFlightPlan)
        {
            _rawFlightPlanDataItems.Add(aFlightPlan);

            bool end_of_xmit_found = false;

            switch (aFlightPlan.kind)
            {
                case Flightplan_data_kind.airport:
                    ProcessAirports(aFlightPlan.airport);
                    break;

                case Flightplan_data_kind.carp_drive:
                    ProcessCarp(aFlightPlan.carp);
                    break;

                case Flightplan_data_kind.content:
                    ProcessContent(aFlightPlan.content);
                    break;

                case Flightplan_data_kind.crv_leg:
                    ProcessCurveLegs(aFlightPlan.crv);
                    break;

                case Flightplan_data_kind.end_of_xmit:
                    end_of_xmit_found = true;
                    break;

                case Flightplan_data_kind.navaid:
                    ProcessNavaids(aFlightPlan.nav);
                    break;

                case Flightplan_data_kind.none:
                    Console.WriteLine("None");
                    break;

                case Flightplan_data_kind.ref_:
                    ProcessRefPoints(aFlightPlan.ref_);
                    break;

                case Flightplan_data_kind.runway:
                    ProcessRunways(aFlightPlan.runway);
                    break;

                case Flightplan_data_kind.str_leg:
                    ProcessStraightLegs(aFlightPlan.str);
                    break;

                case Flightplan_data_kind.vpt:
                    ProcessVerticalPoints(aFlightPlan.vert1, aFlightPlan.vert2);
                    break;

                case Flightplan_data_kind.waypoint:
                    ProcessWaypoints(aFlightPlan.wpt);
                    break;

                default:
                    Console.WriteLine("Unknown flight plan data type {0}", (int)aFlightPlan.kind);
                    break;
            }

            return end_of_xmit_found;

        }

        private void ProcessAirports(Airport_point_type[] aInfo)
        {
            foreach (Airport_point_type airport in aInfo)
            {
                if (airport.sequence_number.value != 0)
                {
                    //TODO
                }
            }
        }

        private void DisplayAirports(Airport_point_type[] aInfo)
        {
            foreach (Airport_point_type airport in aInfo)
            {
                if (airport.sequence_number.value != 0)
                {
                    DisplayAirport(airport);
                }
            }

        }

        private void DisplayAirport(Airport_point_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Airport\n");
            Console.Write("\tident: {0}\n", ConvertIdent(aInfo.ident_char));
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\tref: {0}\n", aInfo.ref_);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180);

        }

        private void ProcessCarp(Carp_drive_point_type aInfo)
        {


        }

        private void DisplayCarp(Carp_drive_point_type aInfo)
        {
            Console.Write("Type: CARP\n");
            Console.Write("\tradius: {0}\n", aInfo.radius.value);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude.value, aInfo.longitude.value * 180);
        }

        private void ProcessContent(Content_type aInfo)
        {
            _currentContent = aInfo;
        }

        private void DisplayContent(Content_type aInfo)
        {
            Console.Write("Type: Content\n");
            Console.Write("\tacft_apt_num: {0}\n", aInfo.acft_apt_num.value);
            Console.Write("\tacft_nav_num: {0}\n", aInfo.acft_nav_num.value);
            Console.Write("\tact_crv_leg_num: {0}\n", aInfo.act_crv_leg_num.value);
            Console.Write("\tact_fp_id: {0}\n", aInfo.act_fp_id);
            Console.Write("\tact_ref_id: {0}\n", aInfo.act_ref_id);
            Console.Write("\tact_ref_num: {0}\n", aInfo.act_ref_num.value);
            Console.Write("\tact_rwy_num: {0}\n", aInfo.act_rwy_num.value);
            Console.Write("\tact_str_leg_num: {0}\n", aInfo.act_str_leg_num.value);
            Console.Write("\tact_vert_id: {0}\n", aInfo.act_vert_id);
            Console.Write("\tact_vpt_num: {0}\n", aInfo.act_vpt_num.value);
            Console.Write("\tact_wpt_num: {0}\n", aInfo.act_wpt_num.value);
            Console.Write("\tapt_id: {0}\n", aInfo.apt_id);
            Console.Write("\tcarp_drv_id: {0}\n", aInfo.carp_drv_id);
            Console.Write("\tcarp_drv_num: {0}\n", aInfo.carp_drv_num.value);
            Console.Write("\tid: {0}\n", aInfo.id);
            Console.Write("\tnav_id: {0}\n", aInfo.nav_id);
            Console.Write("\tstep_apt_num: {0}\n", aInfo.step_apt_num.value);
            Console.Write("\tstep_nav_num: {0}\n", aInfo.step_nav_num.value);
        }

    private void ProcessCurveLegs(Curved_leg_type[] aInfo)
        {
            foreach (Curved_leg_type crv in aInfo)
            {
                ProcessCurveLeg(crv);
            }
        }

        private void ProcessCurveLeg(Curved_leg_type aInfo)
        {
            if (aInfo.sequence_number.value != 0)
            {
                if (aInfo.sequence_number.value > _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.CurvedLeg])
                {
                    _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.CurvedLeg] = aInfo.sequence_number.value;

                    _flightPlans[aInfo.fp_kind].CurvedLegs.Add(aInfo);
                }

            }
        }
        private void DisplayCurveLegs(Curved_leg_type[] aInfo)
        {
            foreach (Curved_leg_type crv in aInfo)
            {
                if (crv.sequence_number.value != 0)
                {
                    DisplayCurveLeg(crv);
                }
            }
        }

        private void DisplayCurveLeg(Curved_leg_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Curve Leg\n");
            Console.Write("\tleg type: {0}\n", aInfo.leg_type);
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\twaypoint index: {0}\n", aInfo.waypoint_index.value);
            Console.Write("\tturn direction: {0}\n", aInfo.turn_right > 0 ? "right" : "left");
            Console.Write("\tlat center: {0} ({1})\n", aInfo.latitude_ctr.value, aInfo.latitude_ctr.value * 180);
            Console.Write("\tlon center: {0} ({1})\n", aInfo.longitude_ctr, aInfo.longitude_ctr * 180);
            Console.Write("\tlat end: {0} ({1})\n", aInfo.latitude_end.value, aInfo.latitude_end.value * 180);
            Console.Write("\tlon end: {0} ({1})\n", aInfo.longitude_end, aInfo.longitude_end * 180);
        }

        private void ProcessNavaids(Nav_point_type[] aInfo)
        {
            foreach (Nav_point_type nav in aInfo)
            {
                ProcessNavaid(nav);
            }
        }

        private void ProcessNavaid(Nav_point_type aInfo)
        {
        }

        private void DisplayNavaids(Nav_point_type[] aInfo)
        {
            foreach (Nav_point_type nav in aInfo)
            {
                if (nav.sequence_number.value != 0)
                {
                    DisplayNavaid(nav);
                }
            }
        }

        private void DisplayNavaid(Nav_point_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Navaid\n");
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180);
            Console.Write("\tident: {0}\n", ConvertIdent(aInfo.ident_char));
            Console.Write("\ttype: {0}\n", aInfo.type.ToString());
            Console.Write("\tref: {0}\n", aInfo.ref_);
        }

        private void ProcessRunways(Runway_point_type[] aInfo)
        {
            foreach (Runway_point_type runway in aInfo)
            {
                //TODO
            }
        }

        private void DisplayRunways(Runway_point_type[] aInfo)
        {
            foreach (Runway_point_type runway in aInfo)
            {
                if (runway.sequence_number.value != 0)
                {
                    DisplayRunway(runway);
                }
            }
        }

        private void DisplayRunway(Runway_point_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Runway\n");
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180);
            Console.Write("\tident: {0}\n", ConvertIdent(aInfo.ident_char));
            Console.Write("\ttrue heading: {0}\n", aInfo.true_heading);
            Console.Write("\tlength: {0}\n", aInfo.length.value);
            Console.Write("\trw kind: {0}\n", aInfo.rw_kind);
            Console.Write("\televation: {0}\n", aInfo.elevation.value);
        }

        private void ProcessRefPoints(Ref_point_type[] aInfo)
        {
            foreach (Ref_point_type refpt in aInfo)
            {
                ProcessRefPoint(refpt);
            }
        }

        private void ProcessRefPoint(Ref_point_type aInfo)
        {
            //TODO
        }

        private void DisplayRefPoints(Ref_point_type[] aInfo)
        {
            foreach (Ref_point_type refpt in aInfo)
            {
                if (refpt.sequence_number.value != 0)
                {
                    DisplayRefPoint(refpt);
                }
            }
        }

        private void DisplayRefPoint(Ref_point_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: RefPoint\n");
            Console.Write("\tident: {0}\n", ConvertIdent(aInfo.ident_char));
            Console.Write("\tkind: {0}\n", aInfo.kind);
            Console.Write("\ttype: {0}\n", aInfo.type);
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180);

        }

        private void ProcessStraightLeg(Straight_leg_type aInfo)
        {
            if (aInfo.sequence_number.value != 0)
            {
                if (aInfo.sequence_number.value > _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.StraightLeg])
                {
                    _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.StraightLeg] = aInfo.sequence_number.value;

                    _flightPlans[aInfo.fp_kind].StraightLegs.Add(aInfo);
                }
            }
        }

        private void ProcessStraightLegs(Straight_leg_type[] aInfo)
        {
            foreach (Straight_leg_type strleg in aInfo)
            {
                ProcessStraightLeg(strleg);
            }
        }

        private void DisplayStraightLegs(Straight_leg_type[] aInfo)
        {
            foreach (Straight_leg_type strleg in aInfo)
            {
                if (strleg.sequence_number.value != 0)
                {
                    DisplayStraightLeg(strleg);
                }
            }
        }

        private void DisplayStraightLeg(Straight_leg_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Straight Leg\n");
            Console.Write("\tleg type: {0}\n", aInfo.leg_type);
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\twaypoint index: {0}\n", aInfo.waypoint_index.value);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180);
        }

        private void ProcessVerticalPoints(Vert_point_type aVertPointInfo1, Vert_point_type aVertPointInfo2)
        {
            //TODO aVertPointInfo1

            //TODO aVertPointInfo2

        }

        private void DisplayVerticalPoints(Vert_point_type aVertPointInfo1, Vert_point_type aVertPointInfo2)
        {
            if (aVertPointInfo1.sequence_number.value != 0)
            {
                DisplayVerticalPoint(aVertPointInfo1);
            }

            if (aVertPointInfo2.sequence_number.value != 0)
            {
                DisplayVerticalPoint(aVertPointInfo2);
            }
        }

        private void DisplayVerticalPoint(Vert_point_type aVertPointInfo)
        {
            Debug.Assert(aVertPointInfo.sequence_number.value != 0, "This sequence number is not valid.");

            Console.Write("Type: Vertical Point\n");
        }

        private void ProcessWaypoint(Waypoint_type aInfo)
        {
            if (aInfo.sequence_number.value != 0)
            {
                if (aInfo.sequence_number.value > _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.Waypoint])
                {
                    _flightPlans[aInfo.fp_kind].LastSequenceNumber[Point_type.Waypoint] = aInfo.sequence_number.value;

                    _flightPlans[aInfo.fp_kind].Waypoints.Add(aInfo);
                }
            }
        }

        private void ProcessWaypoints(Waypoint_type[] aInfo)
        {
            foreach (Waypoint_type wp in aInfo)
            {
                ProcessWaypoint(wp);
            }
        }

        private void DisplayWaypoints(Waypoint_type[] aInfo)
        {
            foreach (Waypoint_type wp in aInfo)
            {
                if (wp.sequence_number.value != 0)
                {
                    DisplayWaypoint(wp);
                }
            }
        }

        private void DisplayWaypoint(Waypoint_type aInfo)
        {
            Debug.Assert(aInfo.sequence_number.value != 0, "This sequence number is not valid.");
         
            Console.Write("Type: Waypoint\n");
            Console.Write("\tident: {0}\n", ConvertIdent(aInfo.ident_char));
            Console.Write("\tindex: {0}\n", aInfo.waypoint_index.value);
            Console.Write("\tseq num: {0}\n", aInfo.sequence_number.value);
            Console.Write("\tkind: {0}\n", aInfo.kind);
            Console.Write("\tsteer point: {0}\n", aInfo.steer_point);
            Console.Write("\tstep point: {0}\n", aInfo.step_point);
            Console.Write("\tlat: {0} ({1})\n", aInfo.latitude.value, aInfo.latitude.value * 180.0);
            Console.Write("\tlon: {0} ({1})\n", aInfo.longitude, aInfo.longitude * 180.0);
        }

        private void DisplayWaypointDBRecord(Waypoint_DB_Record aRec, Flight_plan_kind afpkind)
        {

            using (StreamWriter sr = new StreamWriter("out.csv", true))
            {

                switch (aRec.wp_type)
                {
                    case FLIGHT_PLAN.FLIGHT_PLAN_PRIMARY_LEG:
                    case FLIGHT_PLAN.FLIGHT_PLAN_PROVISIONAL_LEG:
                    case FLIGHT_PLAN.FLIGHT_PLAN_INACTIVE_LEG:
                        {
                            //straight leg

                            Console.Write("STRAIGHT LEG:\n");

                            string ident = null;

                            GetWaypointIdentifier(aRec.straight_leg.str_leg_assoc_waypt, out ident, afpkind);

                            Console.Write("Waypoint ID: {0}\n", ident);
                            Console.Write("Lat1: {0} ({1})\n", aRec.straight_leg.latitude_point1, aRec.straight_leg.latitude_point1 * 180);
                            Console.Write("Lon1: {0} ({1})\n", aRec.straight_leg.longitude_point1, aRec.straight_leg.longitude_point1 * 180);
                            Console.Write("Lat2: {0} ({1})\n", aRec.straight_leg.latitude_point2, aRec.straight_leg.latitude_point2 * 180);
                            Console.Write("Lon2: {0} ({1})\n", aRec.straight_leg.longitude_point2, aRec.straight_leg.longitude_point2 * 180);

                            sr.Write("SL,{0},{1},{2}\n", aRec.straight_leg.latitude_point1 * 180, aRec.straight_leg.longitude_point1 * 180,
                                      ident);
                            sr.Write("SL,{0},{1},{2}\n", aRec.straight_leg.latitude_point2 * 180, aRec.straight_leg.longitude_point2 * 180,
                                      ident);

                            string legCat = "?";

                            switch (aRec.curved_leg.crv_leg_category)
                            {
                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_NORMAL_LEG:
                                    legCat = "NORMAL_LEG";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_OFFSET_LEG:
                                    legCat = "OFFSET_LEG";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_INACTIVE_MISSED_APPROACH:
                                    legCat = "INACTIVE_MISSED_APPROACH";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_ACTIVE_MISSED_APPROACH:
                                    legCat = "ACTIVE_MISSED_APPROACH";
                                    break;

                                default:
                                    legCat = "UNKNOWN";
                                    break;
                            }

                            Console.Write("Leg Category: {0}\n", legCat);

                            break;
                        }

                    case FLIGHT_PLAN.FLIGHT_PLAN_PRIMARY_CURVED_LEG:
                    case FLIGHT_PLAN.FLIGHT_PLAN_PROV_CURVED_LEG:
                    case FLIGHT_PLAN.FLIGHT_PLAN_INACTIVE_CURVED_LEG:
                        {
                            //curved leg

                            Console.Write("CURVED LEG:\n");

                            string ident = null;

                            GetWaypointIdentifier(aRec.curved_leg.crv_leg_assoc_waypt, out ident, afpkind);

                            Console.Write("Waypoint ID: {0}\n", ident);

                            Console.Write("Lat1: {0} ({1})\n", aRec.curved_leg.latitude_point1, aRec.curved_leg.latitude_point1 * 180);
                            Console.Write("Lon1: {0} ({1})\n", aRec.curved_leg.longitude_point1, aRec.curved_leg.longitude_point1 * 180);
                            Console.Write("Lat2: {0} ({1})\n", aRec.curved_leg.latitude_point2, aRec.curved_leg.latitude_point2 * 180);
                            Console.Write("Lon2: {0} ({1})\n", aRec.curved_leg.longitude_point2, aRec.curved_leg.longitude_point2 * 180);
                            Console.Write("Lat3: {0} ({1})\n", aRec.curved_leg.latitude_point3, aRec.curved_leg.latitude_point3 * 180);
                            Console.Write("Lon3: {0} ({1})\n", aRec.curved_leg.longitude_point3, aRec.curved_leg.longitude_point3 * 180);
                            Console.Write("Turn direction: {0}\n", aRec.curved_leg.turn_right ? "RIGHT" : "LEFT");

                            Waypoint_type wpt;

                            GetWaypoint(aRec.curved_leg.crv_leg_assoc_waypt, out wpt, afpkind);

                            sr.Write("WP,{0},{1},{2}\n", wpt.latitude.value * 180, wpt.longitude * 180, ident);

                            //sr.Write ("CL,{0},{1},{2}\n", aRec.curved_leg.latitude_point1 * 180, aRec.curved_leg.longitude_point1 * 180, ident );
                            sr.Write("CL,{0},{1},{2}\n", aRec.curved_leg.latitude_point2 * 180, aRec.curved_leg.longitude_point2 * 180, ident);
                            sr.Write("CL,{0},{1},{2}\n", aRec.curved_leg.latitude_point3 * 180, aRec.curved_leg.longitude_point3 * 180, ident);

                            string legCat = "?";

                            switch (aRec.curved_leg.crv_leg_category)
                            {
                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_NORMAL_LEG:
                                    legCat = "NORMAL_LEG";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_OFFSET_LEG:
                                    legCat = "OFFSET_LEG";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_INACTIVE_MISSED_APPROACH:
                                    legCat = "INACTIVE_MISSED_APPROACH";
                                    break;

                                case FMS_LEG_CAT_TYPE.FMS_LEG_CAT_TYPE_ACTIVE_MISSED_APPROACH:
                                    legCat = "ACTIVE_MISSED_APPROACH";
                                    break;

                                default:
                                    legCat = "UNKNOWN";
                                    break;
                            }

                            Console.Write("Leg Category: {0}\n", legCat);

                            break;
                        }

                    default:
                        {
                            Console.Write("Unknown WP_TYPE\n");
                            break;
                        }

                }

            }
        }

        private bool GetWaypoint(ushort aId, out Waypoint_type wpt, Flight_plan_kind afpkind)
        {
            wpt = _flightPlans[afpkind].Waypoints.FirstOrDefault(x => x.waypoint_index.value == aId);

            return wpt != null;
        }

        private bool GetWaypointIdentifier(ushort aId, out string ident, Flight_plan_kind afpkind)
        {
            bool found = false;

            ident = null;

            Waypoint_type wp;
            
            if (GetWaypoint(aId, out wp, afpkind))
            {
                ident = ConvertIdent(wp.ident_char).Trim();

                found = true;
            }

            return found;
        }

        private string ConvertIdent(sbyte[] aIdent)
        {
            return ASCIIEncoding.ASCII.GetString(aIdent.Select(x => (byte)x).ToArray(), 0, 6).Trim();
        }

        private void GetBytes(byte[] raw, ushort[] words)
        {
            for (int i = 0; i < 32; i++)
            {
                raw[i * 2] = (byte)(words[i] >> 8);
                raw[i * 2 + 1] = (byte)(words[i]);
            }
        }

        private Message1553 ParseMessage(string[] aFields)
        {

            Message1553 msg = new Message1553();

            //ex: [2021](336)11:47:13.294.346.760
            Regex r = new Regex(@"\[(?<year>[\d]+)\]\((?<day>[\d]+)\)(?<hour>[\d]+):(?<minute>[\d]+):(?<second>[\d]+)\.(?<millisecond>[\d]+)\.(?<microsecond>[\d]+)\.(?<nanosecond>[\d]+)");

            Match m = r.Match(aFields[0]);

            ulong[] data = new ulong[5];
            data[0] = ulong.Parse(m.Groups["hour"].Value);
            data[1] = ulong.Parse(m.Groups["minute"].Value);
            data[2] = ulong.Parse(m.Groups["second"].Value);
            data[3] = ulong.Parse(m.Groups["millisecond"].Value);
            data[4] = ulong.Parse(m.Groups["microsecond"].Value);

            ulong t = ulong.Parse(m.Groups["nanosecond"].Value);

            ulong[] multi = new ulong[] {
                60ul * 60ul * 1000ul * 1000ul * 1000ul,
                60ul * 1000ul * 1000ul * 1000ul,
                1000ul * 1000ul * 1000ul,
                1000ul * 1000ul,
                1000ul
                };


            for (int i = 0; i < data.Length; i++)
            {
                ulong ns = (data[i] * multi[i]);

                t += ns;
            }

            msg.year = ushort.Parse(m.Groups["year"].Value);
            msg.day = ushort.Parse(m.Groups["day"].Value); ;
            msg.timestamp = t;
            msg.Command = Convert.ToUInt16(aFields[4], 16);

            for (int i = 0; i < 32; i++)
            {
                msg.Data[i] = Convert.ToUInt16(aFields[i + 8], 16);
            }

            return msg;

        }
    }
}
